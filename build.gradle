buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.flywaydb:flyway-database-postgresql:11.13.2"
    }
}

plugins {
    id 'fabric-loom' version '1.11.8'
    id 'maven-publish'
    id 'org.flywaydb.flyway' version '11.13.2'
    id 'nu.studer.jooq' version '10.1.1'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "monomod" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    mavenCentral()
}

configurations {
    flywayMigration
    bundle {
        transitive = true
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    bundle("net.dv8tion:JDA:5.6.1")
    bundle("org.jooq:jooq:3.19.0")
    bundle("org.jooq:jooq-meta:3.19.0")
    bundle("org.jooq:jooq-codegen:3.19.0")
    bundle("org.flywaydb:flyway-core:${project.flyway_version}")
    bundle("org.flywaydb:flyway-database-postgresql:${project.flyway_version}")
    bundle("org.postgresql:postgresql:42.7.8")

    implementation("net.dv8tion:JDA:5.6.1")
    implementation("org.jooq:jooq:3.19.0")
    implementation("org.jooq:jooq-meta:3.19.0")
    implementation("org.jooq:jooq-codegen:3.19.0")
    implementation("org.flywaydb:flyway-core:${project.flyway_version}")
    implementation("org.flywaydb:flyway-database-postgresql:${project.flyway_version}")
    implementation("org.postgresql:postgresql:42.7.8")

    flywayMigration "org.flywaydb:flyway-database-postgresql:${project.flyway_version}"

    flywayMigration "org.postgresql:postgresql:42.7.8"
    jooqGenerator "org.postgresql:postgresql:42.7.8"
}

afterEvaluate {
    configurations.bundle.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        dependencies.add('include', "${artifact.moduleVersion.id.group}:${artifact.moduleVersion.id.name}:${artifact.moduleVersion.id.version}")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:postgresql://localhost:5432/sample'
    user = 'admin'
    password = 'dummy_password'
}

jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = false // Only generate schema source explicitly via task

            generationTool {
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'pink.zak.basecamp.monomod.model.db'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true
}